#pragma once

/*
 =============================게임 엔진에 대한 설명===============================

  게임오브젝트는 컴포넌트 기반으로 설계하고있다.

  가장 상단의 GameProcess가 Manager 와 D2dRenderer를 가진다
  Initalize를 통해서 미리 생성한 D2dRenderer를 가져오고 Manager들을 초기화한다.

  ============================게임 루프==========================
  1. timeManager 와 inputManager로 델타타입과 키입력을 처리한다.

  2. 물리 처리 단계에서는 간단한 게임의 물리 처리를 진행한다 
    물리처리는 한 프레임이 낮으면 여러번 호출된다. 
  3. 물리 처리 단계에서는 GameObject가 RigidBody와 연관이 있다.
 
  4. 충돌처리 단계에서는 오브젝트의 타입에 따라서 충돌을 처리하고 
    충돌처리는 각각 AABB, OBB, CC, CircleAndBox 처리가 있다.
    Collision 정보로는 상대방 게임 오브젝트와 충돌체를 반환한다. 
    x-> 충돌후의 물리적인 처리는 미구현

  5. 게임 오브젝트 업데이트 단계는 게임 오브젝트의 타입에의 순서대로 업데이트를 진행한다
   게임 오브젝트는 컴포넌트를 가지고 이 컴포넌트는 CALL_ORDER 에따라 순서대로 이벤트가 발생한다

  6. UIManager를 통해서 마우스에 관한 이벤트를 호출한다. 뎁스 구현 예정

  7. 랜더링은 D2D랜더러를 사용해서 랜더링한다. 
   랜더링함수 호출순서는 PreRender -> Render -> PostRender 순으로 호출한다
   디버그 정보는 F5를 사용해서 On/Off가 가능하다.

  8. 이벤트 지연처리는 오브젝트의 삭제, 생성, 씬 변경등의 이벤트들을 관리한다.
 
 =================================================================

 ========================== 엔진체계에 대한 고민 ===================================

 2023.07.03 오전 1:46
 부모 자식관계에 대해서 고민중이다 부모가 삭제되면 자식들도 모두 삭제해버리는 메커니즘이 맞겠지?
 맞는거 같다  부모와 자식은 종속적인 관계로서 작용해야하므로 처리를 그런방식으로 하자!
 하지만 자식이 삭제된다고 해서 부모는 삭제할 필요가 없어 보인다.

 2023.07.03 오후 12:13 
 부모 자식관계를 예외처리는 이제 랜더링에 관해서 작성해야할듯 다른것들의 예외처리는 거의 
 다 한거같음 

 2023.07.03 오후 5:23
 1.게임 오브젝트가 100이상이 넘어가면 충돌처리가 매우 오래걸려서 물리처리를 진행하는 업데이트를 해서
  게임프레임이 급격하게 감소한다. 
  2. 게임 오브젝트의 최상단의 부모만 씬에 등록하면 자식들은 자동으로 등록된다.      `   

====================================================================================

 */  